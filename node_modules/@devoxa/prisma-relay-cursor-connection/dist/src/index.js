"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.findManyCursorConnection = void 0;
const graphql_fields_1 = __importDefault(require("graphql-fields"));
__exportStar(require("./interfaces"), exports);
function findManyCursorConnection(findMany, aggregate, args = {}, pOptions) {
    return __awaiter(this, void 0, void 0, function* () {
        if (!validateArgs(args)) {
            throw new Error('This code path can never happen, only here for type safety');
        }
        const options = mergeDefaultOptions(pOptions);
        const requestedFields = options.resolveInfo && Object.keys((0, graphql_fields_1.default)(options.resolveInfo));
        const hasRequestedField = (key) => !requestedFields || requestedFields.includes(key);
        let records;
        let totalCount;
        let hasNextPage;
        let hasPreviousPage;
        if (isForwardPagination(args)) {
            const take = args.first + 1;
            const cursor = decodeCursor(args.after, options);
            const skip = cursor ? 1 : undefined;
            records = yield findMany({ cursor, take, skip });
            totalCount = hasRequestedField('totalCount') ? yield aggregate() : -1;
            hasPreviousPage = !!args.after;
            hasNextPage = records.length > args.first;
            if (hasNextPage)
                records.pop();
        }
        else if (isBackwardPagination(args)) {
            const take = -1 * (args.last + 1);
            const cursor = decodeCursor(args.before, options);
            const skip = cursor ? 1 : undefined;
            records = yield findMany({ cursor, take, skip });
            totalCount = hasRequestedField('totalCount') ? yield aggregate() : -1;
            hasNextPage = !!args.before;
            hasPreviousPage = records.length > args.last;
            if (hasPreviousPage)
                records.shift();
        }
        else {
            records = hasRequestedField('edges') || hasRequestedField('nodes') ? yield findMany({}) : [];
            totalCount = hasRequestedField('totalCount') ? yield aggregate() : -1;
            hasNextPage = false;
            hasPreviousPage = false;
        }
        const startCursor = records.length > 0 ? encodeCursor(records[0], options) : undefined;
        const endCursor = records.length > 0 ? encodeCursor(records[records.length - 1], options) : undefined;
        const edges = records.map((record) => {
            return Object.assign(Object.assign({}, options.recordToEdge(record)), { cursor: encodeCursor(record, options) });
        });
        return {
            edges,
            nodes: edges.map((edge) => edge.node),
            pageInfo: { hasNextPage, hasPreviousPage, startCursor, endCursor },
            totalCount: totalCount,
        };
    });
}
exports.findManyCursorConnection = findManyCursorConnection;
function validateArgs(args) {
    if (args.first != null && args.last != null) {
        throw new Error('Only one of "first" and "last" can be set');
    }
    if (args.after != null && args.before != null) {
        throw new Error('Only one of "after" and "before" can be set');
    }
    if (args.after != null && args.first == null) {
        throw new Error('"after" needs to be used with "first"');
    }
    if (args.before != null && args.last == null) {
        throw new Error('"before" needs to be used with "last"');
    }
    if (args.first != null && args.first <= 0) {
        throw new Error('"first" has to be positive');
    }
    if (args.last != null && args.last <= 0) {
        throw new Error('"last" has to be positive');
    }
    return true;
}
function mergeDefaultOptions(pOptions) {
    return Object.assign({ getCursor: (record) => ({ id: record.id }), encodeCursor: (cursor) => cursor.id, decodeCursor: (cursorString) => ({ id: cursorString }), recordToEdge: (record) => ({ node: record }), resolveInfo: null }, pOptions);
}
function isForwardPagination(args) {
    return 'first' in args && args.first != null;
}
function isBackwardPagination(args) {
    return 'last' in args && args.last != null;
}
function decodeCursor(connectionCursor, options) {
    if (!connectionCursor) {
        return undefined;
    }
    return options.decodeCursor(connectionCursor);
}
function encodeCursor(record, options) {
    return options.encodeCursor(options.getCursor(record));
}
//# sourceMappingURL=index.js.map